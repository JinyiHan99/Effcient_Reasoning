import openai
import json

from tqdm import tqdm

KW_KEY = "kw-DBR9tOGMy4GOS51ZIOrbdcFeP7J4aEviOX9qQ5SEVmm26DxU"
client = openai.OpenAI(
    api_key=KW_KEY,
    base_url='http://10.176.40.145:8502'
)

eval_prompt = '''Now, I want to test an AI assistant's ability to answer questions.
Below is a question, a ground truth answer, and a final answer generated by the AI assistant, which is wrapped in \\boxed{}.
Please rate the AI assistant's final answer according to the ground truth answer.
If you think the answer is correct, your output is 1; otherwise, your output is -1.
Your output is just -1 or 1.'''

def read_jsonl(file_path):
    data = []
    with open(file_path, 'r', encoding='utf-8') as f:
        for line in f:
            data.append(json.loads(line))
    return data

def save_list_to_jsonl(data_list, file_path):
    with open(file_path, 'w', encoding='utf-8') as f:
        for item in data_list:
            f.write(json.dumps(item, ensure_ascii=False) + '\n')

prompt_template = '''
        ### Question:
        {Question}

        ### Ground Truth:
        {Ground_Truth}

        ### Answer:
        {Answer}
        '''
def llm_eval(question, ans, std):
    matches = re.findall(r'\\boxed\{(.*?)\}', ans)
    final_answer =  "\\boxed{" + matches[0] + "}" if matches else ans
    user_prompt = prompt_template.format(Question = question, Ground_Truth =std, Answer = ans)
    
    res = response.choices[0].message.content
    try: 
        reward = float(res)

    except:
        numbers = re.findall(r"[-+]?\d*\.\d+|\d+", res)
        if numbers:
        # 取最后一个数字并转换
            last_number = numbers[-1]
            reward = float(last_number)
        else:
        # 如果没有找到任何数字，返回0
            reward = 0.0
    finally:
    # 确保奖励在0-1之间
        reward = max(0.0, min(reward, 1.0))
    return reward

import http.client
import json

conn = http.client.HTTPSConnection("ark.cn-beijing.volces.com")
payload = json.dumps({
   "model": "doubao-pro-32k-240615",
   "messages": [
      {
         "role": "system",
         "content": "You are a helpful assistant."
      },
      {
         "role": "user",
         "content": "Hello!"
      }
   ]
})
headers = {
   'Authorization': 'Bearer ',
   'Content-Type': 'application/json'
}
conn.request("POST", "/api/v3/chat/completions", payload, headers)
res = conn.getresponse()
data = res.read()
print(data.decode("utf-8"))

# data_paths = ["/data2/hanjin1/hjy_backup/inference/0823/DeepSeek-R1-Distill-Qwen-7B_gpqa_diamond_cleaned_results.jsonl",
# "/data2/hanjin1/hjy_backup/inference/0823/step_500_gpqa_diamond_cleaned_results.jsonl"]
# for data_path in data_paths:
#     data = read_jsonl(data_path)
#     save_path = data_path.replace(".jsonl","_eval.jsonl")
#     infer_data = []

#     for example in tqdm(data):
#         user_prompt = prompt_template.format(Question = example['question'], Ground_Truth =example['std'], Answer = example['model_answer'])
#         request_params = {
#             "model": "gpt-4", # gpt-4o, gpt-4, claude-3-5-sonnet-20241022, ... （见本页面上方“可用模型说明”）
#             "messages": [
#                 {"role": "system", "content": f"You are a helpful assistant. {eval_prompt}"},
#                 {"role": "user", "content": user_prompt},
#             ],
#         }
#         response = client.chat.completions.create(**request_params)
#         response_dict = response.model_dump()
#         res = response_dict['choices'][0]['message']['content']
#         example['eval_res'] = res
#         print(f"!!评估结果:{res}\n\n")

#         #在这里做进一步处理
#         try: 
#             reward = float(res)
#         except:
#             numbers = re.findall(r"[-+]?\d*\.\d+|\d+", res)
#             if numbers:
#                 last_number = numbers[-1]
#                 reward = float(last_number)
#             else:
#                 reward = -1.0
  
        
#         example['eval_flag'] = reward
#         infer_data.append(example)
#         save_list_to_jsonl(infer_data,save_path)



